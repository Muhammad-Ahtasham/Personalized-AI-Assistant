// This Prisma schema uses Neon/Postgres

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  clerkId      String?       @unique
  email        String        @unique
  password     String?
  firstName    String?
  lastName     String?
  faceEmbeddings FaceEmbedding[]
  learningPlans LearningPlan[]
  quizResults   QuizResult[]
  notes        Note[]
  createdAt    DateTime      @default(now())
}

model FaceEmbedding {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  embedding Json     // Store face embedding as JSON
  createdAt DateTime @default(now())
}

model LearningPlan {
  id        String   @id @default(cuid())
  topic     String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model QuizResult {
  id         String   @id @default(cuid())
  topic      String
  questions  Json
  answers    Json
  score      Int
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model Note {
  id          String       @id @default(cuid())
  title       String
  content     String
  tags        String[]     @default([])
  isPinned    Boolean      @default(false)
  isStarred   Boolean      @default(false)
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  versions    NoteVersion[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model NoteVersion {
  id        String   @id @default(cuid())
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  title     String
  content   String
  tags      String[] @default([])
  createdAt DateTime @default(now())
}
